name: Kustomize Image Tags
description: Set Kustomization Image Tags and Commit changes
inputs:
  images:
    description: Images to be pushed. Image tags will be used as suffix.
    required: false
  image-repos:
    description: Image Repositories
    required: false
    deprecationMessage: THIS INPUT IS DEPRECATED. Use 'images' instead.
  image-tag:
    description: Custom Image Tag
    required: false
    default: commit-sha
outputs:
  commit-hash:
    description: The hash from the resulting commit, may be empty if unable to commit
    value: ${{ steps.kustomize-image-tags.outputs.commit-hash }}
runs:
  using: composite
  steps:
    - name: Enforce Manifests .yaml Extension
      shell: bash
      run: find ./k8s/overlays/*/kustomization.yml && echo 'This is an intentional error. K8s manifests extension must be ".yaml".' && exit 1 || echo 'Everything good to go!'
    - name: Set Kustomization Image Tags
      env:
        SCRIPTS_PATH: ${{ github.action_path }}/scripts
      id: kustomize-image-tags
      shell: bash
      run: |
        set -x

        export IMAGES="${{ inputs.images }}"
        export IMAGE_REPOS="${{ inputs.image-repos }}"
        if [[ ! -z "${IMAGES}" ]] && [[ ! -z "${IMAGE_REPOS}" ]]
        then
          echo '"images" and "image-repos" inputs are not allowed simultaneously. "image-repos" is deprecated. Use "images" instead'
        elif [[ -z "${IMAGES}" ]]
        then
          export IMAGES="${IMAGE_REPOS}"
        fi

        export IMAGE_TAG="$(${SCRIPTS_PATH}/print-image-tag.sh "${{ inputs.image-tag }}")"

        for OVERLAY in $(find ./k8s -type d -path "*/overlays/*" -prune)
        do
          ${SCRIPTS_PATH}/kustomize-set-image-tags.sh "${OVERLAY}"
        done

        git reset
        find ./k8s -type f -name kustomization.yaml -exec git add {} \;
        ${SCRIPTS_PATH}/print-commit-message.sh | git commit -F -

        echo "commit-hash<<EOF" >> ${GITHUB_OUTPUT}
        git push --set-upstream "$(git remote show)" "$(git rev-parse --abbrev-ref HEAD)" && git rev-parse HEAD >> ${GITHUB_OUTPUT} || echo "Skipping commit..."
        echo "EOF" >> ${GITHUB_OUTPUT}
